esphomeyaml:
  name: washing_machine
  platform: ESP8266
  board: esp01_1m
  
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.1.162
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.1.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0

mqtt:
  broker: !secret mqtt_broker
  username: !secret mqtt_user
  password: !secret mqtt_password

# Enable logging
logger:

# Enable Home Assistant API
api:

ota:

globals:
  - id: leds_state
    type: int[5]
  - id: wash_state
    type: int
    initial_value: '0'
  - id: remaining_seconds
    type: int
    initial_value: '-1'

sensor:
  - platform: duty_cycle
    pin: GPIO5
    name: start
    update_interval: 1s
    on_value_range:
      - below: 10
        then:
          - lambda: 'id(leds_state)[0] = 0;' # LED_OFF
      - above: 2
        below: 25
        then:
          - lambda: 'id(leds_state)[0] = 1;' # LED_BLINK
      - above: 25
        then:
          - lambda: 'id(leds_state)[0] = 2;' # LED_ON
  - platform: duty_cycle
    pin: GPIO4
    name: min_60
    update_interval: 1s
    on_value_range:
      - below: 10
        then:
          - lambda: 'id(leds_state)[1] = 0;' # LED_OFF
      - above: 2
        below: 25
        then:
          - lambda: 'id(leds_state)[1] = 1;' # LED_BLINK
      - above: 25
        then:
          - lambda: 'id(leds_state)[1] = 2;' # LED_ON
  - platform: duty_cycle
    pin: GPIO12
    name: min_30
    update_interval: 1s
    on_value_range:
      - below: 10
        then:
          - lambda: 'id(leds_state)[2] = 0;' # LED_OFF
      - above: 2
        below: 25
        then:
          - lambda: 'id(leds_state)[2] = 1;' # LED_BLINK
      - above: 25
        then:
          - lambda: 'id(leds_state)[2] = 2;' # LED_ON
  - platform: duty_cycle
    pin: GPIO13
    name: min_15
    update_interval: 1s
    on_value_range:
      - below: 5
        then:
          - lambda: 'id(leds_state)[3] = 0;' # LED_OFF
      - above: 5
        below: 15
        then:
          - lambda: 'id(leds_state)[3] = 1;' # LED_BLINK
      - above: 15
        then:
          - lambda: 'id(leds_state)[3] = 2;' # LED_ON
  - platform: duty_cycle
    pin: GPIO15
    name: stop
    update_interval: 1s
    on_value_range:
      - below: 5
        then:
          - lambda: 'id(leds_state)[4] = 0;' # LED_OFF
      - above: 5
        below: 25
        then:
          - lambda: 'id(leds_state)[4] = 1;' # LED_BLINK
      - above: 25
        then:
          - lambda: 'id(leds_state)[4] = 2;' # LED_ON
  - platform: template
    name: washing_state
    update_interval: 1s
    lambda: |-
        if (id(leds_state)[4] == 1) {
          if (id(wash_state) != 2 &&
              id(wash_state) != 3) {
            id(wash_state) = 1; // READY_TO_START
            id(remaining_seconds) = -1;
          }
        }
        else if (id(leds_state)[4] == 2) {
          id(wash_state) = 4; // PROGRAMME_ENDED
          id(remaining_seconds) = 0;
        }
        else {
          // STOP is OFF
          byte orState = 0;
          for (int i = 0; i < 5; i++) {
            orState |= id(leds_state)[i];
          }
      
          if ((orState & 2) != 0) {
            // Any is on
             id(wash_state) = 2; // WASHING
          }
          else if ((orState & 1) != 0) {
            // Any is blinking
            id(wash_state) = 3; // PROGRAMME_PAUSED
          }
          else {
            id(wash_state) = 0; // OFF
            id(remaining_seconds) = -1;
          }
        }
        
        return id(wash_state);

        ESP_LOGD("W", "wash_state is: %d", id(wash_state));
  - platform: template
    name: remaining_time
    update_interval: 1s
    lambda: |-
        if(id(wash_state) == 2) {
          int max_wash_time = (75 * 60); // 75min Synthetic 30ยบ
          
          if (id(remaining_seconds) > 0) {
            id(remaining_seconds)--;
          }
          else if (id(remaining_seconds) < 0) {
            id(remaining_seconds) = max_wash_time;
          }
  
          if (id(leds_state)[0] == 2) {
            id(remaining_seconds) = min(id(remaining_seconds), max_wash_time);
          }
          else if (id(leds_state)[1] == 2) {
            id(remaining_seconds) = min(id(remaining_seconds), 60 * 60);
          }
          else if (id(leds_state)[2] == 2) {
            id(remaining_seconds) = min(id(remaining_seconds), 60 * 30);
          }
          else if (id(leds_state)[3] == 2) {
            id(remaining_seconds) = min(id(remaining_seconds), 60 * 15);
          }
        }
        
        return id(remaining_seconds);

        ESP_LOGD("W", "remaining_seconds is: %d", id(remaining_seconds));