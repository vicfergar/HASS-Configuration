esphome:
  name: washing_machine
  platform: ESP8266
  board: d1_mini

<<: !include .common.wifi.yaml

# Enable logging
logger:

globals:
  - id: anim_frame
    type: int
  - id: leds_state
    type: int[5]
  - id: wash_state
    type: int
    restore_value: yes
    initial_value: '0'
  - id: remaining_seconds
    type: int
    restore_value: yes
    initial_value: '-1'

status_led:
  pin:
    number: GPIO2
    inverted: true
    
i2c:
  sda: GPIO4
  scl: GPIO5
  
font:
  - file: 'fonts/Helvetica.ttf'
    id: font1
    size: 14

image:
  - file: "images/washing-machine-off.png"
    id: wm_off
    resize: 34x34
  - file: "images/washing-machine_anim_1.png"
    id: wm_anim_1
    resize: 34x34
  - file: "images/washing-machine_anim_2.png"
    id: wm_anim_2
    resize: 34x34
  - file: "images/washing-machine_anim_3.png"
    id: wm_anim_3
    resize: 34x34
  - file: "images/washing-machine_anim_4.png"
    id: wm_anim_4
    resize: 34x34
  
display:
  - platform: ssd1306_i2c
    model: "SSD1306 64x48"
    reset_pin: D0
    address: 0x3C
    lambda: |-
      if(id(wash_state) == 2) {
        switch(id(anim_frame))
        {
          case 0: it.image(16, 0, id(wm_anim_1)); break;
          case 1: it.image(16, 0, id(wm_anim_2)); break;
          case 2: it.image(16, 0, id(wm_anim_3)); break;
          case 3: it.image(16, 0, id(wm_anim_4)); break;
        }
        id(anim_frame) = (id(anim_frame) + 1) % 4;
        it.printf(0, 44, id(font1), "%5ds", id(washing_remaining).state);
      } else {
        it.image(16, 0, id(wm_off));
        id(anim_frame) = 0;
        auto text = id(washing_state).state.c_str();
        int padlen = (16 - strlen(text)) / 2;
        it.printf(0, 44, id(font1), "%*s%s%*s", padlen, " ", text, padlen, " ");
        //it.printf(0, 44, id(font1), "%s", id(washing_state).state.c_str());
      }

sensor:
  - platform: duty_cycle
    pin: GPIO3 # GPIO5
    name: start
    update_interval: 1s
    accuracy_decimals: 0
    filters:
      - throttle: 2s
    on_value_range:
      - below: 10
        then:
          - lambda: 'id(leds_state)[0] = 0;' # LED_OFF
      - above: 10
        below: 40
        then:
          - lambda: 'id(leds_state)[0] = 1;' # LED_BLINK
      - above: 40
        then:
          - lambda: 'id(leds_state)[0] = 2;' # LED_ON

  - platform: duty_cycle
    pin: GPIO14
    name: min_60
    update_interval: 1s
    accuracy_decimals: 0
    filters:
      - throttle: 2s
    on_value_range:
      - below: 10
        then:
          - lambda: 'id(leds_state)[1] = 0;' # LED_OFF
      - above: 10
        below: 40
        then:
          - lambda: 'id(leds_state)[1] = 1;' # LED_BLINK
      - above: 40
        then:
          - lambda: 'id(leds_state)[1] = 2;' # LED_ON

  - platform: duty_cycle
    pin: GPIO12
    name: min_30
    update_interval: 1s
    accuracy_decimals: 0
    filters:
      - throttle: 2s
    on_value_range:
      - below: 10
        then:
          - lambda: 'id(leds_state)[2] = 0;' # LED_OFF
      - above: 10
        below: 40
        then:
          - lambda: 'id(leds_state)[2] = 1;' # LED_BLINK
      - above: 40
        then:
          - lambda: 'id(leds_state)[2] = 2;' # LED_ON

  - platform: duty_cycle
    pin: GPIO13
    name: min_15
    update_interval: 1s
    accuracy_decimals: 0
    filters:
      - throttle: 2s
    on_value_range:
      - below: 10
        then:
          - lambda: 'id(leds_state)[3] = 0;' # LED_OFF
      - above: 10
        below: 40
        then:
          - lambda: 'id(leds_state)[3] = 1;' # LED_BLINK
      - above: 40
        then:
          - lambda: 'id(leds_state)[3] = 2;' # LED_ON

  - platform: duty_cycle
    pin: GPIO15
    name: stop
    update_interval: 1s
    accuracy_decimals: 0
    filters:
      - throttle: 2s
    on_value_range:
      - below: 10
        then:
          - lambda: 'id(leds_state)[4] = 0;' # LED_OFF
      - above: 10
        below: 40
        then:
          - lambda: 'id(leds_state)[4] = 1;' # LED_BLINK
      - above: 40
        then:
          - lambda: 'id(leds_state)[4] = 2;' # LED_ON

  - platform: template
    id: washing_remaining
    name: washing_remaining
    update_interval: 1s
    accuracy_decimals: 0
    unit_of_measurement: "s"
    icon: mdi:timelapse
    lambda: |-
        if(id(wash_state) == 2) {
          int max_wash_time = (75 * 60); // 75min Synthetic 30ยบ
          
          if (id(remaining_seconds) > 0) {
            id(remaining_seconds)--;
          }
          else if (id(remaining_seconds) < 0) {
            id(remaining_seconds) = max_wash_time;
          }
  
          if (id(leds_state)[0] == 2) {
            id(remaining_seconds) = min(id(remaining_seconds), max_wash_time);
          }
          else if (id(leds_state)[1] == 2) {
            id(remaining_seconds) = min(id(remaining_seconds), 60 * 60);
          }
          else if (id(leds_state)[2] == 2) {
            id(remaining_seconds) = min(id(remaining_seconds), 60 * 30);
          }
          else if (id(leds_state)[3] == 2) {
            id(remaining_seconds) = min(id(remaining_seconds), 60 * 15);
          }
        }
        
        return id(remaining_seconds) > 0 ? id(remaining_seconds) : NAN;
        
text_sensor:
  - platform: template
    id: washing_state
    name: washing_state
    update_interval: 1s
    icon: mdi:washing-machine
    lambda: |-
        if (id(leds_state)[4] == 1) {
          id(wash_state) = 1; // READY_TO_START
          id(remaining_seconds) = -1;
          return {"ready"};
        }
        else if (id(leds_state)[4] == 2) {
          id(wash_state) = 4; // PROGRAMME_COMPLETED
          id(remaining_seconds) = 0;
          return {"completed"};
        }
        else {
          // STOP is OFF
          byte orState = 0;
          for (int i = 0; i < 5; i++) {
            orState |= id(leds_state)[i];
          }
      
          if (orState == 0) {
            // All is off
            id(wash_state) = 0; // OFF
            id(remaining_seconds) = -1;
            return {"off"};
          }
          else if ((orState & 2) != 0) {
            // Any is on
             id(wash_state) = 2; // WASHING
            return {"washing"};
          }
          else{
            // Any is blinking
            id(wash_state) = 3; // PROGRAMME_PAUSED
            return {"paused"};
          }
        }