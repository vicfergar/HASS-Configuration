substitutions:
  hostname: nx_sm200_dev
  upper_hostname: "SM_DEV"
  default_restore_mode: RESTORE_DEFAULT_OFF

esphome:
  name: $hostname
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: $hostname
    password: !secret wifi_ap_password

captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:

# Enable over-the-air updates
ota:

# Enable Web server
web_server:
  port: 80
    
status_led:
  pin:
    number: GPIO0
    inverted: yes

# Sync time with Home Assistant
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      # Every morning on weekdays
      - seconds: 0
        days_of_week: MON-FRI
        then:
          - script.execute: timer_on_auto
      # Every afthernoon on weekdays
      - seconds: 30
        days_of_week: MON-FRI
        then:
          - script.execute: timer_on_auto
      # Every morning on weekend
      - seconds: 0
        minutes: 0
        hours: 10
        days_of_week: SAT-SUN
        then:
          - script.execute: timer_on_auto
      # Every afthernoon on weekend
      - seconds: 0
        minutes: 0
        hours: 17
        days_of_week: SAT-SUN
        then:
          - script.execute: timer_on_auto
    
script:
  - id: timer_off_auto
    mode: restart
    then:
      - delay: 2s
      - switch.turn_off: relay
  - id: timer_off_manual
    mode: restart
    then:
      - delay: 5s
      - switch.turn_off: relay
  - id: remove_timers
    mode: single
    then:
      - script.stop: timer_off_auto
      - script.stop: timer_off_manual
  - id: timer_on_auto
    mode: restart
    then:
      - if:
          condition:
            switch.is_off: relay
          then:
            - script.execute: remove_timers
            - switch.turn_on: relay
            - script.execute: timer_off_auto
  - id: timer_on_manual
    mode: restart
    then:
      - script.execute: remove_timers
      - switch.turn_on: relay
      - script.execute: timer_off_manual

binary_sensor:
  # Binary sensor for the button press
  - platform: gpio
    id: button
    pin:
      number: GPIO13
      inverted: true
    on_press:
      - switch.toggle: relay
      - if:
          condition:
            switch.is_on: relay
          then:
            - script.execute: timer_on_manual
  
  # Connected device is power on
  - platform: template
    name: "$upper_hostname On"
    lambda: |-
        return id(power).state > 6;

switch:
  # Switch to toggle the relay
  - platform: gpio
    id: relay
    name: $upper_hostname
    pin: GPIO15
    restore_mode: $default_restore_mode
    on_turn_on:
      - light.turn_on: led
    on_turn_off:
      - light.turn_off: led
      - script.execute: remove_timers

output:
  # Relay state led
  - platform: esp8266_pwm
    id: state_led
    pin:
      number: GPIO2
      inverted: true

light:
  # Relay state light
  - platform: monochromatic
    restore_mode: $default_restore_mode
    output: state_led
    id: led
    
sensor:
  # Uptime sensor
  - platform: uptime
    name: "$upper_hostname Uptime"
  # WiFi Signal sensor
  - platform: wifi_signal
    name: "$upper_hostname Wifi Signal"
    update_interval: 10s
  # Power sensor
  - platform: hlw8012
    sel_pin:
      number: GPIO03
      inverted: True
    cf_pin: GPIO05
    cf1_pin: GPIO14
    current_resistor: 0.001 ohm
    voltage_divider: 2041
    change_mode_every: 4
    update_interval: 10s
    # Current sensor
    current:
      name: "$upper_hostname Current"
      unit_of_measurement: A
      accuracy_decimals: 3
      filters:
        # Map from sensor -> measured value
        - calibrate_linear:
            - 0.0 -> 0.0
            - 2.4 -> 2.15
            - 4.9 -> 4.33
        # Make everything below 0.01A appear as just 0A.
        - lambda: if (x < 0.01) return 0; else return x;
    # Voltage sensor
    voltage:
      name: "$upper_hostname Voltage"
      unit_of_measurement: V
      accuracy_decimals: 1
      filters:
        # Map from sensor -> measured value
        - calibrate_linear:
            - 0.0 -> 0.0
            - 526.7 -> 231.8
    # Power sensor
    power:
      id: power
      name: "$upper_hostname Power"
      unit_of_measurement: W
      accuracy_decimals: 0
      filters:
        # Map from sensor -> measured value
        - calibrate_linear:
            - 0.0 -> 0.0
            - 2287 -> 500
            - 4584 -> 990
        # Make everything below 3W appear as just 0W.
        - lambda: if (x < 3) return 0; else return x;
  # Total daily energy sensor
  - platform: total_daily_energy
    name: "$upper_hostname Energy Today"
    power_id: power
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh
    
#esphome:
#  name: nx_sm200_dev
#  platform: ESP8266
#  board: esp01_1m
#  on_boot:
#    - lambda: 'sprintf(id(deviceName), "nx-sm200_%06X", ESP.getChipId());'
#    
#globals:
#   - id: deviceName
#     type: char[23]
#
#wifi:
#  ssid: !secret wifi_ssid
#  password: !secret wifi_password
#  ap:
#    ssid: "sm200_ap"
#
## Enable logging
#logger:
#
## Enable Home Assistant API
#api:
#
#ota:
#
##captive_portal:
#
#web_server:
#  port: 80
#    
#status_led:
#  pin:
#    number: GPIO0
#    inverted: yes
#
#binary_sensor:
#  - platform: gpio
#    pin:
#      number: GPIO13
#      inverted: true
#    name: "Button"
#    on_multi_click:
#      - timing:
#          - ON for at most 1s
#          - OFF for at most 1s
#          - ON for at most 1s
#          - OFF for at most 1s
#          - ON for at most 1s
#          - OFF for at least 0.2s
#        then:
#          - logger.log: "Triple Clicked"
#      - timing:
#          - ON for at most 1s
#          - OFF for at most 1s
#          - ON for at most 1s
#          - OFF for at least 0.2s
#        then:
#          - logger.log: "Double Clicked"
#      - timing:
#          - ON for at least 6s
#        then:
#          - logger.log: "Single Long Clicked"
#      - timing:
#          - ON for at most 1s
#          - OFF for at least 0.5s
#        then:
#          - logger.log: "Single Short Clicked"
#          - switch.toggle: relay
#
#switch:
#  - platform: gpio
#    name: "Relay"
#    pin: GPIO15
#    id: relay
#    
#sensor:
#  - platform: hlw8012
#    sel_pin:
#      number: GPIO12
#      inverted: True
#    cf_pin: GPIO05
#    cf1_pin: GPIO14
#    current:
#      name: "Current"
#      unit_of_measurement: A
#    voltage:
#      name: "Voltage"
#      unit_of_measurement: V
#    power:
#      name: "Power"
#      id: switch_power
#      unit_of_measurement: W
#    current_resistor: 0.001 ohm
#    voltage_divider: 2041
#    change_mode_every: 4
#    update_interval: 1s
